"There are two kinds of operators in Od: infix and unary.
Unary operator is a string of special characters put before an object.
The example below is a subsequent application of two unary operators:"

++ ! a

"Infix operator is put between an arbitrary number of operands. The
associativity will be decided by the callee (the first operand). The following
example consists of one infix operator named `+ + *`:"

a + b + c * d

"Strangely enough, expression `a + b` becomes ambiguous: is it `+` applied to
`a` and `b` or `(+b).a()`? OdLang decides it is the former. To really mean the
latter, use braces or commas:"

a + b

a (+ b)

+ b, a

"Finally, let's talk about precedence. Unary operators have the highest
priority, excluding the case discussed above (callee of the method); then comes
the method call; infix operators are next; comma has the lowest priority. Note
that there is no priority between infix operators!
As an exercise, guess the priority in expressions below. Use the parser to check
your answers."

factorial 3 + -4

-3 + 4, factorial

on inbox print -1
